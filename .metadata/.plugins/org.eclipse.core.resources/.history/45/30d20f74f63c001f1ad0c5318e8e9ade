package com.wipro.articlesprbootapp.controller;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.annotation.DateTimeFormat.ISO;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wipro.articlesprbootapp.entity.Article;
import com.wipro.articlesprbootapp.service.ArticleService;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
@RequestMapping("/api/v1/articles/hateos")
@CrossOrigin(allowCredentials = "false", allowedHeaders = "*", origins = "*", methods = { RequestMethod.GET,
		RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE })
public class ArticleRestControllerHateoas {

	@Autowired
	private ArticleService articleService;

	@Autowired
	ArticleModelAssembler articleModelAssembler;

	@GetMapping("/all")
	public ResponseEntity<CollectionModel<EntityModel<Article>>> getAllArticles() {

		List<EntityModel<Article>> artlist = articleService.getAllArticles().stream()
				.map(articleModelAssembler::toModel).collect(Collectors.toList());

		return ResponseEntity.ok(CollectionModel.of(artlist,
				linkTo(methodOn(ArticleController.class).getAllArticles()).withSelfRel()));

	}

	
}
